	
	ViewComponent, bir Controller gibi çal???r, ancak daha küçük ve ba??ms?z bir mant?k birimidir.
Invoke metodu, ViewComponent'in ça?r?ld???nda çal??t?raca?? mant??? içerir. Yani, bu metot ViewComponent'in "giri? noktas?d?r".
Invoke ad?, bu mant???n, bir metot ça?r?s?(invocation) arac?l???yla ba?lat?ld???n? belirtir.

	Senkron i?lem, bir görevin tamamlanmas?n? bekleyen bir yürütme modelidir.
Bir i?lem, tamamen tamamlanmadan bir sonraki sat?ra geçilmez. Yani i?lemler s?ral? olarak yürütülür. E?er veri alma i?lemi çok uzun sürerse (örne?in, bir API ça?r?s? yap?yorsa), 
uygulama donmu? gibi görünür ve kullan?c? deneyimi olumsuz etkilenir.

	Asenkron i?lem, bir görevin tamamlanmas?n? beklemek yerine, i?lemi ba?lat?r ve di?er görevlerin çal??mas?na devam eder. 
Görev tamamland???nda, i?lem sonuçlar?na geri dönülür.

		Asenkronun Özellikleri:
		??lem, program?n ana ak???n? bloklamaz.
		Di?er i?lemler, uzun süren i?lemler devam ederken çal??abilir.
		Daha karma??k görünebilir, ancak yüksek performans sa?lar.


.asp-for özelliği, bir form öğesini doğrudan modeldeki bir özelliğe bağlar. Bu sayede hem model verilerinin forma, hem de form verilerinin modele otomatik olarak aktarılması sağlanır.

Partial View:
	Eğer veri işleme veya bir iş mantığına ihtiyaç duymayan, yalnızca bir HTML şablonunu parçalamak için bir yapı gerekiyorsa Partial View kullanılır.

	Genel Karşılaştırma
Özellik	Partial View	ViewComponent
İş Mantığı	İş mantığı içermez veya minimaldir.	İş mantığı barındırabilir.
Bağımsızlık	Kontrolöre bağımlıdır.	Kontrolörden bağımsızdır.
Performans	Performansı göreceli olarak daha düşüktür.	Daha optimize ve performanslıdır.
Veri Kaynağı	Geçerli modelden veri alır.	Kendi model ve verisini yönetebilir.
Test Edilebilirlik	Test edilmesi zordur.	Daha kolay test edilebilir.


IdentityDbContext Nedir?
IdentityDbContext, ASP.NET Core Identity ile ilgili varlıkları (Users, Roles, Claims, Logins vb.) ve ilişkilerini yönetmek için gerekli olan hazır bir EF Core bağlam sınıfıdır. Varsayılan olarak aşağıdaki tablo yapılarını oluşturur:

AspNetUsers: Kullanıcılar
AspNetRoles: Roller
AspNetUserRoles: Kullanıcı-Rol ilişkisi
AspNetUserClaims: Kullanıcıya ait talepler
AspNetRoleClaims: Role ait talepler
AspNetUserLogins: Harici oturum açma bilgileri
AspNetUserTokens: Kullanıcıya ait token bilgileri

Neden Generic Kullanılmıştır?
IdentityDbContext sınıfı, farklı projelerde özelleştirilebilir olması için generics (WriterUser, WriterRole, int) ile tanımlanmıştır. Bu sayede, varsayılan kullanıcı (IdentityUser) ve rol (IdentityRole) modelleri yerine, kendi özel modellerinizi tanımlayıp kullanabilirsiniz.

WriterUser:
Bu parametre, kullanıcıları temsil eden sınıfı belirtir. Örneğin, IdentityUser yerine kullanıcı modeline ek özellikler (ör. FirstName, LastName gibi) eklemek için özel bir sınıf olan WriterUser tanımlanabilir.

WriterRole:
Bu parametre, roller için kullanılan sınıfı belirtir. Eğer rol modelinde ek özellikler (ör. Description gibi) kullanmanız gerekiyorsa, bunu da özelleştirebilirsiniz.

int:
Varsayılan olarak string kullanılan anahtar tipi (Id) yerine, birincil anahtarın türünü (int) belirtir. Kimlik sütununun GUID yerine int olması gibi durumlarda bu özelleştirme yapılır.

3. Neden Bu Şekilde Kullanılır?
ASP.NET Core Identity'nin esnek ve özelleştirilebilir bir yapıya sahip olması için bu generics yaklaşımı kullanılır. Örneğin:

Varsayılan kullanıcı modeli (IdentityUser) yeterli olmadığında, kendi özelliklerinizi içeren bir sınıf oluşturabilirsiniz.
Varsayılan GUID tabanlı birincil anahtar yerine int, long veya başka bir tür kullanabilirsiniz.
Role ilişkin ek özellikler eklemek istediğinizde, özelleştirilmiş bir rol sınıfı kullanabilirsiniz.
IdentityDbContext<WriterUser, WriterRole, int> kullanımı, uygulamanızın kimlik doğrulama ve yetkilendirme gereksinimlerini özelleştirmek için idealdir. Kullanıcı ve rol modellerini genişleterek, uygulamanızın ihtiyaçlarına uygun bir yapı oluşturur.